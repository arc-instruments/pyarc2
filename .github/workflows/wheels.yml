name: Generate wheels
on: [push]
jobs:
  releasecheck:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install python libraries
        run: python -m pip install tomli requests semver
      - name: Check release
        run: python releasecheck.py commitcheck
  linux-wheels:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    needs: [releasecheck]
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    steps:
      - uses: actions/checkout@v3
      - name: Link /io
        run: ln -s /__w/pyarc2 /io
      - name: Run build script
        run: ./build-linux-wheels-2_28.sh
      - name: Gather wheels
        uses: actions/upload-artifact@v4
        with:
          name: pyarc2-manylinux_x86_64
          path: |
            target/wheels/pyarc2*-manylinux*_x86_64.whl
      - name: Gather sdist
        uses: actions/upload-artifact@v4
        with:
          name: pyarc2-sdist
          path: target/wheels/pyarc2*tar.gz
  windows-wheels:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: windows-latest
    needs: [releasecheck]
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install required python packages
        run: python -m pip install poetry delvewheel requests setuptools
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Fetch required libraries
        run: python getbl-win32.py
      - name: Poetry environment setup 1 of 2
        run: python -m poetry install
      - name: Poetry environment setup 2 of 2
        run: python -m poetry update
      - name: Build
        run: python -m poetry run maturin build --release --interpreter python.exe
      - name: Ensure setuptools exists within venv for 3.12 and beyond
        run: python -m poetry run pip install setuptools
      - name: Delvewheel
        run: |
          $files = Get-ChildItem target\wheels\pyarc2*-win_amd64.whl
          foreach ($f in $files) {
            python -m poetry run delvewheel repair --add-path . $f.FullName -w target\wheels
          }
        shell: pwsh
      - name: Gather wheels
        uses: actions/upload-artifact@v4
        with:
          name: pyarc2-win_amd64-wheel-${{ matrix.python-version }}
          path: target/wheels/pyarc2*-win_amd64.whl
  merged-windows-wheels:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    needs: [windows-wheels]
    steps:
      - name: Merge windows wheels
        uses: actions/upload-artifact/merge@v4
        with:
          name: pyarc2-win_amd64
          pattern: pyarc2-win_amd64-wheel-*
  publish:
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    needs: [merged-windows-wheels, linux-wheels]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install python tools
        run: python -m pip install twine
      - uses: actions/download-artifact@v4
        id: download
        with:
          path: artifacts
      - name: Print download path
        run: echo ${{ steps.download.outputs.download-path }}
      - name: List artifacts dir contents
        run: ls -l artifacts
      - name: Download path contents
        run: |
          ls -l artifacts/pyarc2-sdist/*tar.gz && 
          ls -l artifacts/pyarc2-manylinux_x86_64/*whl &&
          ls -l artifacts/pyarc2-win_amd64/*whl
      - name: Twine check
        run: |
          python -m twine check \
            artifacts/pyarc2-sdist/*tar.gz \
            artifacts/pyarc2-manylinux_x86_64/*whl \
            artifacts/pyarc2-win_amd64/*whl
      - name: Publish
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_UPLOAD_API_TOKEN }}
        run: |
          python -m twine upload \
            artifacts/pyarc2-sdist/*tar.gz \
            artifacts/pyarc2-manylinux_x86_64/*whl \
            artifacts/pyarc2-win_amd64/*whl
